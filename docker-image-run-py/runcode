#! /usr/bin/env python3

from __future__ import annotations


__copyright__ = "Copyright (C) 2014 Andreas Kloeckner"

__license__ = """
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import io
import json
import socketserver
import sys


try:
    from code_run_backend import Struct, package_exception, run_code
except ImportError:
    try:
        # When faking a container for unittest
        from course.page.code_run_backend import Struct, package_exception, run_code
    except ImportError:
        # When debugging, i.e., run "python runpy" command line
        import os
        sys.path.insert(0, os.path.abspath(
            os.path.join(os.path.dirname(__file__), os.pardir)))
        from course.page.code_run_backend import Struct, package_exception, run_code

from http.server import BaseHTTPRequestHandler


PORT = 9941
OUTPUT_LENGTH_LIMIT = 16*1024

TEST_COUNT = 0


def truncate_if_long(s):
    if len(s) > OUTPUT_LENGTH_LIMIT:
        s = (s[:OUTPUT_LENGTH_LIMIT//2]
                + "\n[... TOO MUCH OUTPUT, SKIPPING ...]\n"
                + s[-OUTPUT_LENGTH_LIMIT//2:])
    return s


class RunRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):  # noqa: N802
        print("GET RECEIVED", file=sys.stderr)
        if self.path != "/ping":
            raise RuntimeError("unrecognized path in GET")

        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()

        self.wfile.write(b"OK")
        print("PING RESPONSE DONE", file=sys.stderr)

    def do_POST(self):  # noqa: N802
        global TEST_COUNT
        TEST_COUNT += 1

        response = {}

        prev_stdout = sys.stdout
        prev_stderr = sys.stderr

        try:
            print("POST RECEIVED", file=prev_stderr)
            if self.path != "/run-python":
                raise RuntimeError("unrecognized path in POST")

            clength = int(self.headers["content-length"])
            recv_data = self.rfile.read(clength)

            print("RUNPY RECEIVED %d bytes" % len(recv_data),
                    file=prev_stderr)
            run_req = Struct(json.loads(recv_data.decode("utf-8")))

            # recv_data contains test_code, which may be sensitive.
            # Prevent access to this via the frame.
            del recv_data

            print("REQUEST: %r" % run_req, file=prev_stderr)

            stdout = io.StringIO()
            stderr = io.StringIO()

            sys.stdin = None
            sys.stdout = stdout
            sys.stderr = stderr

            run_code(response, run_req)

            response["stdout"] = truncate_if_long(stdout.getvalue())
            response["stderr"] = truncate_if_long(stderr.getvalue())

            print("REQUEST SERVICED: %r" % response, file=prev_stderr)

            json_result = json.dumps(response).encode("utf-8")

            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()

            print("WRITING RESPONSE", file=prev_stderr)
            self.wfile.write(json_result)
            print("WROTE RESPONSE", file=prev_stderr)
        except Exception:
            print("ERROR RESPONSE", file=prev_stderr)
            response = {}
            package_exception(response, "uncaught_error")
            json_result = json.dumps(response).encode("utf-8")

            self.send_response(500)
            self.send_header("Content-type", "application/json")
            self.end_headers()

            self.wfile.write(json_result)
        finally:
            sys.stdout = prev_stdout
            sys.stderr = prev_stderr


def main():
    print("STARTING, LISTENING ON %d" % PORT, file=sys.stderr)
    server = socketserver.TCPServer(("", PORT), RunRequestHandler)

    serve_single_test = len(sys.argv) > 1 and sys.argv[1] == "-1"

    while True:
        server.handle_request()
        print("SERVED REQUEST", file=sys.stderr)
        if TEST_COUNT > 0 and serve_single_test:
            break

    server.server_close()
    print("FINISHED server_close()", file=sys.stderr)

    print("EXITING", file=sys.stderr)


if __name__ == "__main__":
    main()

# vim: foldmethod=marker
