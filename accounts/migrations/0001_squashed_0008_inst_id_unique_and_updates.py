# Generated by Django 5.0.7 on 2024-07-29 03:01

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('accounts', '0001_initial'), ('accounts', '0002_user_populate_migration'), ('accounts', '0003_user_schema_migration'), ('accounts', '0004_user_contenttypes_migration'), ('accounts', '0005_custom_user_cleanup'), ('accounts', '0006_empty_auth_user'), ('accounts', '0007_migrate_user_status_data'), ('accounts', '0008_inst_id_unique_and_updates')]

    initial = True

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customtemp_user_set', related_query_name='customtemp_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customtemp_user_set', related_query_name='customtemp_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AlterField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='editor_mode',
            field=models.CharField(choices=[('default', 'Default'), ('sublime', 'Sublime text'), ('emacs', 'Emacs'), ('vim', 'Vim')], default='default', help_text="Which key bindings you prefer when editing larger amounts of text or code. (If you do not understand what this means, leave it as 'Default'.)", max_length=20, verbose_name='Editor mode'),
        ),
        migrations.AddField(
            model_name='user',
            name='institutional_id',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='Institutional ID'),
        ),
        migrations.AddField(
            model_name='user',
            name='institutional_id_verified',
            field=models.BooleanField(default=False, help_text="Indicates that this user's institutional ID has been verified as being associated with the individual able to log in to this account.", verbose_name='Institutional ID verified'),
        ),
        migrations.AddField(
            model_name='user',
            name='key_time',
            field=models.DateTimeField(blank=True, default=None, help_text='The time stamp of the sign in token.', null=True, verbose_name='Key time'),
        ),
        migrations.AddField(
            model_name='user',
            name='name_verified',
            field=models.BooleanField(default=False, help_text="Indicates that this user's name has been verified as being associated with the individual able to sign in to this account.", verbose_name='Name verified'),
        ),
        migrations.AddField(
            model_name='user',
            name='sign_in_key',
            field=models.CharField(blank=True, db_index=True, help_text='The sign in token sent out in email.', max_length=50, null=True, unique=True, verbose_name='Sign in key'),
        ),
        migrations.AddField(
            model_name='user',
            name='status',
            field=models.CharField(choices=[('unconfirmed', 'Unconfirmed'), ('active', 'Active')], max_length=50, null=True, verbose_name='User status'),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(blank=True, max_length=100, verbose_name='email address'),
        ),
        migrations.AlterField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=100, verbose_name='first name'),
        ),
        migrations.AlterField(
            model_name='user',
            name='last_name',
            field=models.CharField(blank=True, max_length=100, verbose_name='last name'),
        ),
        migrations.AlterField(
            model_name='user',
            name='editor_mode',
            field=models.CharField(choices=[('default', 'Default'), ('sublime', 'Sublime text'), ('emacs', 'Emacs'), ('vim', 'Vim')], default='default', help_text="Which key bindings you prefer when editing larger amounts of text or code. (If you do not understand what this means, leave it as 'Default'.)", max_length=20, verbose_name='Editor mode'),
        ),
        migrations.AlterField(
            model_name='user',
            name='institutional_id',
            field=models.CharField(blank=True, db_index=True, max_length=100, null=True, unique=True, verbose_name='Institutional ID'),
        ),
        migrations.AlterField(
            model_name='user',
            name='status',
            field=models.CharField(choices=[('unconfirmed', 'Unconfirmed'), ('active', 'Active')], max_length=50, null=True, verbose_name='User status'),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username'),
        ),
    ]
